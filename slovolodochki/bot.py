# coding=utf8
from PIL import Image
import telebot
from telebot import types
import os
from flask import Flask, request
import math
import json
from words import word, word_only, word_with_boats, word_with_drops, text
from dtb import *
import datetime


server = Flask(__name__)
TOKEN = '1630813007:AAHf-fp39lyBWuDWxLXthnHKgWMdRcmeUB0'
admins = [599040955]
members_dict = {}
bot = telebot.TeleBot(TOKEN)
start_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
b1 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥ —Å–ª–æ–≤')
b2 = types.KeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
start_menu.add(b2, b1)


#–ê–î–ú–ò–ù
@bot.message_handler(commands=['admin'])
def menu(message):
    if message.chat.id not in admins:
        bot.send_message(chat_id=message.chat.id, text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    b1 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='add_user')
    b2 = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å', callback_data='delete_user')
    b3 = types.InlineKeyboardButton(text='–î–æ—Å—Ç—É–ø –Ω–∞ –¥–µ–Ω—å', callback_data='trial')
    markup.add(b1, b2, b3)
    bot.send_message(chat_id=message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data == 'add_user')
def ask_for_message(query):
    bot.send_message(chat_id=query.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –¢–æ–ª—å–∫–æ —Ç–∞–∫ —è —Å–º–æ–≥—É —É–∑–Ω–∞—Ç—å –µ–≥–æ –∞–π–¥–∏')
    message = query.message
    bot.register_next_step_handler(message, ask_name)

def ask_name(message):
    try:
        id = message.forward_from.id
        print(id)
    except Exception as e: 
         bot.send_message(chat_id=message.chat.id, text=f'–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ {e}')
         menu(message)
         return
    try:
        if id not in get_ids():
            add_user(id)
        enable_premium(id, str(datetime.date.today()))
        bot.send_message(chat_id=message.chat.id, text=f'–£—Å–ø–µ—Ö!')
        bot.send_message(chat_id=message.chat.id, text=f'ID: {id}')
        bot.send_message(chat_id=id, text='üéâ–£—Ä–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∫–æ–ª–ª–µ–≥ –≤ –±–æ—Ç–∞, –±–æ–ª—å—à–µ –ª—é–¥–µ–π - —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –±–æ—Ç', reply_markup=start_menu)
    except Exception as e:
        bot.send_message(chat_id=message.chat.id, text=f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞ {e}')
        menu(message)


@bot.callback_query_handler(lambda query: query.data == 'trial')
def ask_for_message_trial(query):
    bot.send_message(chat_id=query.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –¢–æ–ª—å–∫–æ —Ç–∞–∫ —è —Å–º–æ–≥—É —É–∑–Ω–∞—Ç—å –µ–≥–æ –∞–π–¥–∏')
    message = query.message
    bot.register_next_step_handler(message, ask_name_trial)

def ask_name_trial(message):
    try:
        id = message.forward_from.id
        print(id)
    except Exception as e: 
         bot.send_message(chat_id=message.chat.id, text=f'–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ {e}')
         menu(message)
         return
    try:
        if id not in get_ids():
            add_user(id)
        enable_premium(id, str(datetime.date.today() - datetime.timedelta(days=29)))
        bot.send_message(chat_id=message.chat.id, text=f'–£—Å–ø–µ—Ö!')
        bot.send_message(chat_id=message.chat.id, text=f'ID: {id}')
        bot.send_message(chat_id=id, text='üéâ–£—Ä–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ –¥–µ–Ω—å.\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', reply_markup=start_menu)
    except Exception as e:
        bot.send_message(chat_id=message.chat.id, text=f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞ {e}')
        menu(message)
        

@bot.message_handler(commands=['users'])
def answer(message):
    paid = [i for i in get_ids() if is_pro(i) == True]
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {len(get_ids())}, –∏–∑ –Ω–∏—Ö —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {len(paid)}")

@bot.callback_query_handler(lambda query: query.data == 'delete_user')
def users_list(query):
    users = []
    for i in get_ids():
        if is_pro(i) == True:
            users.append(i)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for user in sorted(users):
        markup.add(types.InlineKeyboardButton(text=user, callback_data=f'delete_{user}'))
    bot.send_message(chat_id=query.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data[:6] == 'delete')
def delete(query):
    if disable_premium(query.data[7:]):
        bot.send_message(query.message.chat.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.data[7:]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    else:
        bot.send_message(chat_id=query.message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        menu(query.message)



#–î–û–°–¢–£–ü
def is_pro(id):
    if id == '599040955':
        return True
    info = get_info(id)
    if info == None:
        add_user(id)
        return "no"
    if info[2] == None:
        return "no"
    date = datetime.datetime.strptime(info[2], "%Y-%m-%d").date()
    diff = (datetime.date.today() - date).days
    if diff > 30:
        return "expired"
    else:
        return True


@bot.message_handler(commands=['start'])
def answer(message):
    global start_menu
    bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏ —É–≤–∏–¥–∏—Ç–µ –º–∞–≥–∏—é! –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ @tttuuu13', reply_markup=start_menu)


@bot.message_handler(commands=['text'])
def is_available(message):
    r = is_pro(message.chat.id)
    write_me = types.InlineKeyboardMarkup([[types.InlineKeyboardButton(text="–ù–ê–ü–ò–°–ê–¢–¨", url="tg://user?id=599040955")]])
    if r == True:
        ask_text(message)
    elif r == "no":
        bot.send_message(chat_id=message.chat.id, text="‚ùó–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º‚ùó", reply_markup=write_me)
        return
    elif r == "expired":
        bot.send_message(chat_id=message.chat.id, text="üíî–ü–æ—Ö–æ–∂–µ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ", reply_markup=write_me)
        return


def ask_text(message):
    global exit
    exit = False
    markup = types.InlineKeyboardMarkup(row_width=1)
    item = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥', callback_data='–í—ã—Ö–æ–¥')
    markup.add(item)
    bot.send_message(chat_id=message.chat.id, text='‚≠ï–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ enter, –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ - shift+enter.\n‚≠ï–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ "_" –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–∑–∞—Ü–∞\n‚≠ï–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –±—É–∫–≤, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏.\n‚≠ï–ß—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /text.\n‚≠ï–ù–∞–∂–º–∏—Ç–µ "–í—ã—Ö–æ–¥", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏', reply_markup=markup)
    bot.send_message(chat_id=message.chat.id, text='üìù–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Çüëá')
    bot.register_next_step_handler(message, ask_size)

def ask_size(message):
    if exit:
        return
    global text1
    text1 = message.text
    #bot.send_message(chat_id=599040955, text=text1)
    bot.send_message(chat_id=message.chat.id, text='–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞. –°—Ä–µ–¥–Ω–∏–π - 25. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ')
    bot.register_next_step_handler(message, ask_orientation)

def ask_orientation(message):
    if exit:
        return
    global size
    try:
        size = int(message.text)
    except:
        bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, ask_orientation)
        return
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    item1 = types.KeyboardButton('–ê–ª—å–±–æ–º–Ω–∞—è')
    item2 = types.KeyboardButton('–ö–Ω–∏–∂–Ω–∞—è')
    markup.add(item1, item2)
    bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é', reply_markup=markup)
    bot.register_next_step_handler(message, create_text)

def create_text(message):
    if exit:
        return
    global orientation
    orientation = message.text.lower()
    if orientation == '–∞–ª—å–±–æ–º–Ω–∞—è' or orientation == '–∫–Ω–∏–∂–Ω–∞—è':
        pass
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
        item1 = types.KeyboardButton('–ê–ª—å–±–æ–º–Ω–∞—è')
        item2 = types.KeyboardButton('–ö–Ω–∏–∂–Ω–∞—è')
        markup.add(item1, item2)
        bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É', reply_markup=markup)
        bot.register_next_step_handler(message, ask_orientation)
        return
    with open('preferences.txt', 'r') as prf:
        prfs = eval(prf.read())
    if str(message.chat.id) in prfs.keys():
        mode = prfs[str(message.chat.id)]
    else:
        mode = '–û–±—ã—á–Ω—ã–π'
    try:
        msg = bot.send_message(chat_id=message.chat.id, text='–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—èüïí')
        photo, text2 = text(text1, size, orientation, mode)
        photo.save('—Ç–µ–∫—Å—Ç.png')
        photo = open('—Ç–µ–∫—Å—Ç.png', 'rb')
        bot.send_document(chat_id=message.chat.id, document=photo, caption=text1[:10] + '...')
        while text2 != '':
            photo, text2 = text(text2, size, orientation, mode)
            print(text2)
            photo.save('—Ç–µ–∫—Å—Ç.png')
            photo = open('—Ç–µ–∫—Å—Ç.png', 'rb')
            bot.send_document(chat_id=message.chat.id, document=photo, caption='–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ')
        bot.edit_message_text(text='–ì–æ—Ç–æ–≤–æ!', chat_id=message.chat.id, message_id=msg.id)
        bot.send_message(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...', chat_id=message.chat.id, reply_markup=start_menu)
    except:
        bot.delete_message(chat_id=message.chat.id, message_id=msg.id)
        bot.send_message(chat_id=message.chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í —Ç–µ–∫—Å—Ç–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∑–Ω–∞–∫–∏:\n!\n,\n?\n""\n_\n-\n.\n;\n:\n –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞')
        bot.send_message(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...', chat_id=message.chat.id, reply_markup=start_menu)

@bot.message_handler(func=lambda m: m.text == '–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
def generate_text(message):
    is_available(message)

@bot.message_handler(func=lambda m: m.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥ —Å–ª–æ–≤')
def change_word(message):
    choose = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    b1 = types.KeyboardButton(text='–û–±—ã—á–Ω—ã–π')
    b2 = types.KeyboardButton(text='–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã')
    b3 = types.KeyboardButton(text='–ë—É–∫–≤—ã –∏ –∫–∞–ø–µ–ª—å–∫–∏')
    b4 = types.KeyboardButton(text='–ë—É–∫–≤—ã –∏ –ª–æ–¥–æ—á–∫–∏')
    choose.add(b1, b2, b3, b4)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Çe:', reply_markup=choose)
    bot.register_next_step_handler(message, commit)
def commit(message):
    if message.text in ['–û–±—ã—á–Ω—ã–π', '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã', '–ë—É–∫–≤—ã –∏ –∫–∞–ø–µ–ª—å–∫–∏', '–ë—É–∫–≤—ã –∏ –ª–æ–¥–æ—á–∫–∏']:
        with open('preferences.txt', 'r') as prf:
            prfs = eval(prf.read())
        with open('preferences.txt', 'w') as prf:
            prfs[str(message.chat.id)] = message.text
            prf.write(str(prfs))
        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup = types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é...', reply_markup=start_menu)
    else:
        change_word(message)

@bot.message_handler(func=lambda m: m.text[:4]== 'spam')
def spam(message):
    text = message.text[4:]
    ids = admins + get_ids()
    for id in ids:
        print(id)
        bot.send_message(int(id), text=text)
    


@bot.message_handler(func=lambda m: True, content_types=['text'])
def create_word(message):
    r = is_pro(message.chat.id)
    write_me = types.InlineKeyboardMarkup([[types.InlineKeyboardButton(text="–ù–ê–ü–ò–°–ê–¢–¨", url="tg://user?id=599040955")]])
    if r == "no":
        bot.send_message(chat_id=message.chat.id, text="‚ùó–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º‚ùó", reply_markup=write_me)
        return
    elif r == "expired":
        bot.send_message(chat_id=message.chat.id, text="üíî–ü–æ—Ö–æ–∂–µ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ", reply_markup=write_me)
        return
    try:
        for i in message.text.split():
            with open('preferences.txt', 'r') as prf:
                prfs = eval(prf.read())
            if str(message.chat.id) in prfs.keys():
                mode = prfs[str(message.chat.id)]
            else:
                mode = '–û–±—ã—á–Ω—ã–π'
            if mode == '–û–±—ã—á–Ω—ã–π':
                photo, new_line = word(i.lower(), False)
            elif mode == '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã':
                photo, new_line = word_only(i.lower(), False)
            elif mode == '–ë—É–∫–≤—ã –∏ –∫–∞–ø–µ–ª—å–∫–∏':
                photo, new_line = word_with_drops(i.lower(), False)
            else:
                photo, new_line = word_with_boats(i.lower(), False)
            #bot.send_photo(chat_id=message.chat.id, photo=photo)
            photo.save(i + '.png')
            photo = open(i + '.png', 'rb')
            bot.send_document(chat_id=message.chat.id, document=photo)
            photo.close()
            os.remove(i + '.png')
    except:
        bot.send_message(chat_id=message.chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–∏–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –ª–∏–±–æ —Å–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')

@bot.callback_query_handler(lambda query: query.data == '–í—ã—Ö–æ–¥')
def exit_func(query):
    bot.send_message(text='–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é...', chat_id=query.message.chat.id, reply_markup=start_menu)
    global exit
    exit = True
    return

bot.remove_webhook()
bot.infinity_polling()

"""
@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://coral-app-83lpo.ondigitalocean.app/' + TOKEN)
    return "!", 200

if __name__ == '__main__':
    server.debug = True
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5001)))
"""
